{% extends 'temp/admin/base.html.twig' %}

{% block admin_content %}
    <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3">{{ stock ? 'Edit Stock Entry' : 'New Stock Entry' }}</h1>
            <a href="{{ path('admin_stocks') }}" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Stocks
            </a>
        </div>

        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}

        <div class="card shadow mb-4">
            <div class="card-body">
                {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate', 'id': 'stockForm'}}) }}
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                {{ form_label(form.product, 'Product *') }}
                                {{ form_widget(form.product, {'attr': {'class': 'form-control', 'required': 'required'}}) }}
                                <div class="invalid-feedback">
                                    Please select a product.
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                {{ form_label(form.availableQuantity, 'Available Quantity *') }}
                                {{ form_widget(form.availableQuantity, {'attr': {'class': 'form-control', 'required': 'required', 'min': '1'}}) }}
                                <div class="invalid-feedback">
                                    Please enter a valid quantity (minimum 1).
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                {{ form_label(form.stockMinimum, 'Minimum Stock *') }}
                                {{ form_widget(form.stockMinimum, {'attr': {'class': 'form-control', 'required': 'required', 'min': '0'}}) }}
                                <div class="invalid-feedback">
                                    Please enter a minimum stock level.
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                {{ form_label(form.stockMaximum, 'Maximum Stock *') }}
                                {{ form_widget(form.stockMaximum, {'attr': {'class': 'form-control', 'required': 'required', 'min': '0'}}) }}
                                <div class="invalid-feedback">
                                    Please enter a maximum stock level.
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                {{ form_label(form.entryDate, 'Entry Date *') }}
                                {{ form_widget(form.entryDate, {'attr': {'class': 'form-control', 'required': 'required'}}) }}
                                <div class="invalid-feedback">
                                    Please select an entry date.
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                {{ form_label(form.exitDate, 'Exit Date') }}
                                {{ form_widget(form.exitDate, {'attr': {'class': 'form-control'}}) }}
                                <small class="form-text text-muted">Optional. Leave empty if the stock is still available.</small>
                            </div>
                        </div>
                    </div>

                    <div class="text-end mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> {{ stock ? 'Update' : 'Create' }} Stock Entry
                        </button>
                    </div>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('stockForm');
    
    form.addEventListener('submit', function(event) {
        let isValid = true;
        const product = form.querySelector('#stock_product');
        const availableQuantity = form.querySelector('#stock_availableQuantity');
        const stockMinimum = form.querySelector('#stock_stockMinimum');
        const stockMaximum = form.querySelector('#stock_stockMaximum');
        const entryDate = form.querySelector('#stock_entryDate');
        
        // Reset previous validation states
        form.querySelectorAll('.is-invalid').forEach(field => field.classList.remove('is-invalid'));
        
        // Validate each field
        if (!product.value) {
            product.classList.add('is-invalid');
            isValid = false;
        }
        
        if (!availableQuantity.value || availableQuantity.value < 1) {
            availableQuantity.classList.add('is-invalid');
            isValid = false;
        }
        
        if (!stockMinimum.value || stockMinimum.value < 0) {
            stockMinimum.classList.add('is-invalid');
            isValid = false;
        }
        
        if (!stockMaximum.value || stockMaximum.value < 0) {
            stockMaximum.classList.add('is-invalid');
            isValid = false;
        }
        
        if (!entryDate.value) {
            entryDate.classList.add('is-invalid');
            isValid = false;
        }
        
        if (!isValid) {
            event.preventDefault();
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please check all required fields and correct any errors.',
                confirmButtonColor: '#3085d6'
            });
        }
    });
    
    // Real-time validation
    form.querySelectorAll('input, select').forEach(field => {
        field.addEventListener('change', function() {
            if (this.value) {
                this.classList.remove('is-invalid');
            }
        });
    });
});
</script>
{% endblock %}
