{% extends 'base_back.html.twig' %}

{% block title %}Tous les utilisateurs{% endblock %}

{% block body %}
<div class="container d-flex flex-column justify-content-center align-items-center" style="min-height: 100vh; margin-left: 400px; padding-top: 80px;">
    <h1 class="text-center text-light bg-primary p-3 rounded" style="width: 100%;">üë• Tous les utilisateurs</h1>

    <form id="searchForm" class="mb-4 d-flex justify-content-center align-items-center flex-wrap" method="get" style="gap: 30px;margin-left: -100;margin-left: -130px;">
        <div class="mb-3">
            <input type="text" id="searchInput" name="search" class="form-control w-100 w-md-25" placeholder="Rechercher par email, nom..." value="{{ app.request.get('search') }}">
        </div>

        <div class="mb-3">
            <select name="role" id="roleSelect" class="form-control form-select w-100 w-md-25">
                <option value="">Tous les r√¥les</option>
                <option value="ROLE_ADMIN" {% if app.request.get('role') == 'ROLE_ADMIN' %}selected{% endif %}>Admin</option>
                <option value="ROLE_CLIENT" {% if app.request.get('role') == 'ROLE_CLIENT' %}selected{% endif %}>Client</option>
                <option value="ROLE_AGRICULTEUR" {% if app.request.get('role') == 'ROLE_AGRICULTEUR' %}selected{% endif %}>Agriculteur</option>
            </select>
        </div>

        <div class="mb-3">
            <select name="status" id="statusSelect" class="form-control  form-select w-100 w-md-25">
                <option value="">Tous les statuts</option>
                <option value="active" {% if app.request.get('status') == 'active' %}selected{% endif %}>Actif</option>
                <option value="inactive" {% if app.request.get('status') == 'inactive' %}selected{% endif %}>Inactif</option>
                <option value="blocked" {% if app.request.get('status') == 'blocked' %}selected{% endif %}>Bloqu√©</option>
            </select>
        </div>

        <div class="mb-3 ml-9">
            <button type="submit" class="btn btn-primary">üîç Rechercher</button>
            <a href="{{ path('admin_users') }}" id="clearSearchBtn" class="btn btn-secondary">üîÑ Clear Recherche</a>
            <a href="{{ path('admin_users_pdf') }}" class="btn btn-success">üì•PDF</a>
        </div>
    </form>

    <div class="mb-3">
        <a href="{{ path('admin_statistics') }}"class="btn btn-primary">üìä Statistiques des R√¥les</a>
        <button id="btnLoginAttempts" class="btn btn-secondary">üìä Statistiques de Connexion</button>
    </div>

    <div id="statisticsResults">
        <canvas id="chartCanvas" width="400" height="200"></canvas>
    </div>

    <div class="table-responsive mt-4 w-100" style="overflow-x: hidden;">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th class="text-white">Avatar</th>
                    <th class="text-white">ID</th>
                    <th class="text-white">Email</th>
                    <th class="text-white">Nom</th>
                    <th class="text-white">Pr√©nom</th>
                    <th class="text-white">T√©l√©phone</th>
                    <th class="text-white">R√¥les</th>
                    <th class="text-white">Statut</th>
                    <th class="text-white">Actions</th>
                </tr>
            </thead>
            <tbody id="userTableBody">
                {% for user in users %}
                    <tr>
                        <td class="text-center">
                            {% if user.avatar %}
                                <img src="{{ asset('uploads/avatars/' ~ user.avatar) }}" width="50" height="50" class="rounded-circle" alt="Avatar">
                            {% else %}
                                <img src="{{ asset('images/default-avatar.png') }}" width="50" height="50" class="rounded-circle" alt="Default Avatar">
                            {% endif %}
                        </td>
                        <td class="text-center">{{ user.id }}</td>
                        <td class="text-center">{{ user.email }}</td>
                        <td class="text-center">{{ user.nom }}</td>
                        <td class="text-center">{{ user.prenom }}</td>
                        <td class="text-center">{{ user.telephone }}</td>
                        <td class="text-center">{{ user.roles | join(', ') }}</td>
                        <td class="text-center">
                            {% if user.status == 'active' %}
                                <span class="badge bg-success text-white">Actif</span>
                            {% elseif user.status == 'blocked' %}
                                <span class="badge bg-danger text-white">Bloqu√©</span>
                            {% else %}
                                <span class="badge bg-secondary text-white">Inactif</span>
                            {% endif %}
                        </td>
                        <td class="text-center">
                            <div class="d-flex justify-content-center">
                                <a href="{{ path('admin_user_edit', {'id': user.id}) }}" class="btn btn-warning btn-sm mr-2">
                                    <i class="fas fa-edit"></i> Modifier
                                </a>
                                <a href="{{ path('admin_user_delete', {'id': user.id}) }}" class="btn btn-danger btn-sm" onclick="return confirm('√ätes-vous s√ªr ?')">
                                    <i class="fas fa-trash-alt"></i> Supprimer
                                </a>
                            </div>
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    let chartInstance = null; // To store the current chart instance

    function renderChart(data, type) {
        const ctx = document.getElementById('chartCanvas').getContext('2d');

        // Destroy the previous chart instance if it exists
        if (chartInstance) {
            chartInstance.destroy();
        }

        let chartData, chartOptions;

        if (type === 'roles') {
            // Pie chart for roles
            chartData = {
                labels: data.map(stat => stat.role),
                datasets: [{
                    label: 'Number of Users',
                    data: data.map(stat => stat.count),
                    backgroundColor: [
                        'rgba(54, 162, 235, 0.6)',
                        'rgba(255, 99, 132, 0.6)',
                        'rgba(75, 192, 192, 0.6)'
                    ],
                    borderColor: [
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 99, 132, 1)',
                        'rgba(75, 192, 192, 1)'
                    ],
                    borderWidth: 1
                }]
            };

            chartOptions = {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function(tooltipItem) {
                                return tooltipItem.label + ': ' + tooltipItem.raw;
                            }
                        }
                    }
                }
            };
        } else if (type === 'loginAttempts') {
            // Bar chart for login attempts
            chartData = {
                
                labels: data.map(stat => `${stat.email}: ${stat.loginAttempts} Attempts`),
                datasets: [{
                    label: 'Login Attempts',
                    data: data.map(stat => stat.loginAttempts),
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            };

            chartOptions = {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function(tooltipItem) {
                                return 'User: ' + tooltipItem.label + ' | Attempts: ' + tooltipItem.raw;
                            }
                        }
                    }
                }
            };
        }

        // Create the new chart
        chartInstance = new Chart(ctx, {
            type: type === 'roles' ? 'pie' : 'bar',
            data: chartData,
            options: chartOptions
        });
    }

    function fetchStatistics(statType) {
        $.ajax({
            url: '/admin/user/' + statType,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                if (statType === 'statistics') {
                    renderChart(response, 'roles');
                } else if (statType === 'LoginStats') {
                    renderChart(response, 'loginAttempts');
                }
            },
            error: function() {
                $('#statisticsResults').html('<p>Erreur lors de la r√©cup√©ration des statistiques.</p>');
            }
        });
    }

    // Event listeners for button clicks to fetch data
    // document.getElementById('btnUserRoles').addEventListener('click', function() {
    //     fetchStatistics('statistics');
    // });

    document.getElementById('btnLoginAttempts').addEventListener('click', function() {
        fetchStatistics('LoginStats');
    });
</script>

{% endblock %}
