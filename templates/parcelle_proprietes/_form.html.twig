{{ form_start(form, {'attr': {'novalidate': 'novalidate', 'class': 'needs-validation'}}) }}


<div class="mb-3">
    {{ form_label(form.titre, 'Titre', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.titre, {'attr': {'class': 'form-control' ~ (form.titre.vars.errors|length > 0 ? ' is-invalid' : '')}}) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.titre) }}</div>
</div>

<div class="mb-3">
    {{ form_label(form.description, 'Description', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.description, {'attr': {'class': 'form-control' ~ (form.description.vars.errors|length > 0 ? ' is-invalid' : '')}}) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.description) }}</div>
</div>

<div class="mb-3">
    {{ form_label(form.prix, 'Prix', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.prix, {'attr': {'class': 'form-control' ~ (form.prix.vars.errors|length > 0 ? ' is-invalid' : ''), 'pattern': '[0-9]+(\.[0-9]{1,2})?', 'title': 'Entrer un prix valide'}}) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.prix) }}</div>
</div>

<div class="mb-3">
    {{ form_label(form.status, 'Statut', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.status, {'attr': {'class': 'form-control' ~ (form.status.vars.errors|length > 0 ? ' is-invalid' : '')}}) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.status) }}</div>
</div>

<div class="mb-3">
    {{ form_label(form.emplacement, 'Emplacement', {'label_attr': {'class': 'form-label'}}) }}
    
    <!-- Champ de saisie avec autocomplétion -->
    {{ form_widget(form.emplacement, {
        'attr': {
            'class': 'form-control' ~ (form.emplacement.vars.errors|length > 0 ? ' is-invalid' : ''),
            'id': 'autocomplete',
            'placeholder': 'Entrez un emplacement ou sélectionnez sur la carte'
        }
    }) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.emplacement) }}</div>
    
    <!-- Carte interactive -->
    <div id="map" style="height: 400px; margin-top: 20px;"></div>
</div>


<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

<script src="https://unpkg.com/leaflet-geosearch/dist/bundle.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-geosearch/assets/css/leaflet.css" />

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const map = L.map('map').setView([36.8065, 10.1815], 7); // Coordonnées par défaut : Tunis

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    let marker = null;

    // Fonction pour le géocodage inversé
    async function reverseGeocode(lat, lng) {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lng}&format=json`);
            if (response.ok) {
                const data = await response.json();
                return data.display_name || `Latitude: ${lat}, Longitude: ${lng}`;
            } else {
                console.error('Erreur lors du géocodage inversé.');
                return `Latitude: ${lat}, Longitude: ${lng}`;
            }
        } catch (error) {
            console.error('Erreur de connexion au service de géocodage inversé.');
            return `Latitude: ${lat}, Longitude: ${lng}`;
        }
    }

    // Géolocalisation sur la carte
    map.on('click', async (e) => {
        const { lat, lng } = e.latlng;
        if (marker) map.removeLayer(marker);

        marker = L.marker([lat, lng]).addTo(map);

        const input = document.getElementById('autocomplete');
        const address = await reverseGeocode(lat, lng);
        input.value = address;
        input.setAttribute('value', address); // Assurez-vous que la valeur soit correctement capturée par Symfony
    });

    // Autocomplétion avec GeoSearch
    const provider = new window.GeoSearch.OpenStreetMapProvider();

    const input = document.getElementById('autocomplete');
    input.addEventListener('input', async () => {
        const results = await provider.search({ query: input.value });
        if (results.length > 0) {
            const { x, y, label } = results[0];
            if (marker) map.removeLayer(marker);

            marker = L.marker([y, x]).addTo(map);
            map.setView([y, x], 10);

            // Mise à jour du champ emplacement avec l'adresse trouvée
            input.value = label;
            input.setAttribute('value', label); // Assurez-vous que la valeur soit bien envoyée au serveur
        }
    });
});


</script>






<div class="mb-3">
    {{ form_label(form.taille, 'Taille (m²)', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.taille, {'attr': {'class': 'form-control' ~ (form.taille.vars.errors|length > 0 ? ' is-invalid' : ''), 'min': '1', 'step': '0.01'}}) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.taille) }}</div>
</div>

<div class="mb-3">
    {{ form_label(form.date_creation_annonce, 'Date de création', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.date_creation_annonce, {'attr': {'class': 'form-control' ~ (form.date_creation_annonce.vars.errors|length > 0 ? ' is-invalid' : ''), 'placeholder': 'YYYY-MM-DD HH:mm'}}) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.date_creation_annonce) }}</div>
</div>

<div class="mb-3">
    {{ form_label(form.date_misajour_annonce, 'Date de mise à jour', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.date_misajour_annonce, {'attr': {'class': 'form-control' ~ (form.date_misajour_annonce.vars.errors|length > 0 ? ' is-invalid' : ''), 'placeholder': 'YYYY-MM-DD HH:mm'}}) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.date_misajour_annonce) }}</div>
</div>

<div class="mb-3">
    {{ form_label(form.estDisponible, 'Disponible', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.estDisponible, {'attr': {'class': 'form-check-input'}}) }}
</div>

<div class="mb-3">
    {{ form_label(form.nom_proprietaire, 'Nom du propriétaire', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.nom_proprietaire, {'attr': {'class': 'form-control' ~ (form.nom_proprietaire.vars.errors|length > 0 ? ' is-invalid' : '')}}) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.nom_proprietaire) }}</div>
</div>

<div class="mb-3">
    {{ form_label(form.contact_proprietaire, 'Contact du propriétaire', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.contact_proprietaire, {'attr': {'class': 'form-control' ~ (form.contact_proprietaire.vars.errors|length > 0 ? ' is-invalid' : ''), 'pattern': '^\+?[0-9]*$', 'title': 'Numéro de téléphone valide requis'}}) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.contact_proprietaire) }}</div>
</div>

<div class="mb-3">
    {{ form_label(form.image, 'Image', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.image, {'attr': {'class': 'form-control' ~ (form.image.vars.errors|length > 0 ? ' is-invalid' : '')}}) }}
    <div class="invalid-feedback text-danger">
        {{ form_errors(form.image) }}
    </div>
    <div class="mb-3">
    {{ form_label(form.type_terrain, 'Type de terrain', {'label_attr': {'class': 'form-label'}}) }}
    {{ form_widget(form.type_terrain, {'attr': {'class': 'form-control' ~ (form.type_terrain.vars.errors|length > 0 ? ' is-invalid' : '')}}) }}
    <div class="invalid-feedback text-danger">{{ form_errors(form.type_terrain) }}</div>
</div>

</div>

<button type="submit" class="btn btn-primary">
    {{ button_label|default('Enregistrer') }}
</button>




{{ form_end(form) }}
